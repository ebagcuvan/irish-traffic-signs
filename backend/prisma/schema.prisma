// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  passwordHash String
  displayName String
  avatar      String?
  bio         String?
  isAdmin     Boolean  @default(false)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  favorites      Favorite[]
  favoriteCollections FavoriteCollection[]
  quizAttempts   QuizAttempt[]
  ratings       Rating[]
  achievements  Achievement[]
  createdQuizzes Quiz[] @relation("QuizCreator")

  @@map("users")
}

model TrafficSign {
  id            String   @id @default(uuid())
  irishName     String
  englishName  String
  description   String
  category      SignCategory
  difficultyLevel DifficultyLevel
  imageUrl      String
  context       String?
  relatedSignIds String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  favorites     Favorite[]
  ratings       Rating[]
  quizQuestions QuizQuestion[]

  @@map("traffic_signs")
}

model Favorite {
  id           String   @id @default(uuid())
  userId       String
  signId       String
  collectionId String?
  createdAt    DateTime @default(now())

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sign         TrafficSign @relation(fields: [signId], references: [id], onDelete: Cascade)
  collection   FavoriteCollection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)

  @@unique([userId, signId])
  @@map("favorites")
}

model FavoriteCollection {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]

  @@map("favorite_collections")
}

model Quiz {
  id            String   @id @default(uuid())
  title         String
  description   String
  difficultyLevel DifficultyLevel
  timeLimit     Int?     // in seconds
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  creator       User         @relation("QuizCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  questions     QuizQuestion[]
  attempts      QuizAttempt[]

  @@map("quizzes")
}

model QuizQuestion {
  id          String   @id @default(uuid())
  quizId      String
  signId      String?
  question    String
  type        QuestionType
  options     String[] @default([])
  correctAnswer String
  explanation String
  imageUrl    String?
  points      Int      @default(1)
  order       Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  quiz        Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  sign        TrafficSign? @relation(fields: [signId], references: [id], onDelete: SetNull)
  answers     QuizAnswer[]

  @@map("quiz_questions")
}

model QuizAttempt {
  id            String   @id @default(uuid())
  userId        String
  quizId        String
  score         Int      @default(0)
  totalQuestions Int
  timeSpent     Int      // in seconds
  completedAt   DateTime @default(now())

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       QuizAnswer[]

  @@map("quiz_attempts")
}

model QuizAnswer {
  id          String   @id @default(uuid())
  attemptId   String
  questionId  String
  answer      String
  isCorrect   Boolean  @default(false)
  timeSpent   Int      // in seconds
  answeredAt  DateTime @default(now())

  // Relations
  attempt     QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question    QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("quiz_answers")
}

model Achievement {
  id          String   @id @default(uuid())
  userId      String
  badgeName   String
  description String
  iconUrl     String?
  earnedAt    DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model Rating {
  id        String   @id @default(uuid())
  userId    String
  signId    String
  rating    Int      // 1-5 stars
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  sign      TrafficSign @relation(fields: [signId], references: [id], onDelete: Cascade)

  @@unique([userId, signId])
  @@map("ratings")
}

// Enums
enum SignCategory {
  WARNING
  REGULATORY
  MANDATORY
  INFORMATIONAL
  DIRECTIONAL
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  MATCHING
  IMAGE_IDENTIFICATION
}
